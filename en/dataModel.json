{
  "uuid": "ID",
  "timestamp": "timestamp",
  "true": "true",
  "false": "false",
  "name": "name",
  "version": "version",
  "description": "description",
  "product": "product",
  "status": "status",
  "type": "type",
  "universalMeta":{
    "id": "$t(dataModel:uuid)",
    "version": "object version",
    "iot": "IoT",
    "virtual": "virtual",
    "created": "created",
    "changed": "changed",
    "updated": "updated",
    "historical": "historical data logs",
    "historicalOptions": {
      "true": "enabled",
      "false": "disabled"
    },
    "owner":"owner",
    "manufacturer":"manufacturer",
    "geo": "geolocation",
    "geoProperties": {
      "latitude": "latitude",
      "longitude": "longitude",
      "display_name": "name",
      "address": "address"
    }
  },
  "network": "device",
  "network_plural": "devices",
  "networkProperties": {
    "name": "$t(dataModel:name)",
    "description": "$t(dataModel:description)",
    "id": "$t(dataModel:networkProperties.meta.id)",
    "meta": {
      "id": "$t(dataModel:network) $t(dataModel:uuid)",
      "product": "$t(dataModel:product)",
      "connection": "connection",
      "connectionOnline": {
        "true": "online",
        "false": "offline"
      },
      "daily_limit": "daily limit",
      "daily_limitProperties": {
        "point": "points",
        "iot_traffic": "IoT traffic",
        "request": "request",
        "request_time": "request time",
        "dynamic": "dynamic"
      }
    }
  },
  "device": "thing",
  "device_plural": "things",
  "deviceProperties": {
    "meta": {
      "id": "$t(dataModel:device) $t(dataModel:uuid)"
    },
    "name": "$t(dataModel:name)",
    "id": "$t(dataModel:deviceProperties.meta.id)",
    "version": "$t(dataModel:version)",
    "product": "$t(dataModel:product)",
    "protocol": "protocol",
    "serial": "serial",
    "communication": "communication",
    "description": "$t(dataModel:description)",
    "manufacturer": "manufacturer",
    "control_timeout": "control timeout",
    "control_when_offline": "controllable while offline",
    "included": "included",
    "inclusion_status": "inclusion status",
    "inclusion_statusOptions": {
      "STATUS_DEVICE_INCLUDING": "inclusion in progress...",
      "STATUS_DEVICE_INCLUSION_SUCCESS": "inclusion successful",
      "STATUS_DEVICE_INCLUSION_FAILURE": "inclusion failed",
      "STATUS_DEVICE_REPORTING": "reporting...",
      "STATUS_DEVICE_REPORT_SUCCESS": "reported successfully",
      "STATUS_DEVICE_REPORT_FAILURE": "failed to report",
      "EXCLUDED": "excluded",
      "INCLUDED": "included"
    },
    "firmware_status": "firmware status",
    "firmware_statusOptions": {
      "UP_TO_DATE": "up to date",
      "UPDATE_AVAILABLE": "update available",
      "UPLOADING": "uploading...",
      "UPLOAD_COMPLETE": "upload completed",
      "UPLOADING_FAILURE": "failed to upload",
      "FLASHING": "flashing...",
      "FLASHING_COMPLETE": "flashing completed",
      "FLASHING_FAILURE": "flashing failed"
    },
    "firmware_upload_progress": "firmware upload progress",
    "firmware_available_version": "firmware available version",
    "status": "$t(dataModel:status)"
  },
  "value": "value",
  "value_plural": "values",
  "valueProperties": {
    "meta": {
      "id": "$t(dataModel:value) $t(dataModel:uuid)"
    },
    "id": "$t(dataModel:valueProperties.meta.id)",
    "name": "$t(dataModel:value) name",
    "description": "$t(dataModel:networkProperties.description)",
    "type": "$t(dataModel:type)",
    "period": "period",
    "delta": "delta",
    "permission": "permission",
    "permissionOptions": {
      "none": "no permission",
      "r": "read only",
      "w": "write only",
      "rw": "read and write",
      "wr": "$t(dataModel:valueProperties.permissionOptions.rw)"
    },
    "status": "$t(dataModel:status)",
    "statusOptions": {
      "ok": "ok",
      "update": "update",
      "pending": "pending"
    },
    "dataType": "data type",
    "number": "number",
    "numberProperties": {
      "si_conversion": "SI conversion",
      "unit": "unit",
      "min": "minimum number",
      "max": "maximum number",
      "step": "step size",
      "mapping": "mapping",
      "ordered_mapping": "ordered mapping",
      "meaningful_zero": "meaningful zero"
    },
    "string": "string",
    "stringProperties": {
      "encoding": "encoding",
      "max": "maximum length"
    },
    "blob": "blob",
    "blobProperties": {
      "encoding": "$t(dataModel:valueProperties.stringProperties.encoding)",
      "max": "$t(dataModel:valueProperties.stringProperties.max)"
    },
    "xml": "XML",
    "xmlProperties": {
      "xsd": "XSD",
      "namespace": "namespace"
    }
  },
  "state": "state",
  "state_plural": "states",
  "stateProperties": {
    "meta": {
      "id": "$t(dataModel:state) $t(dataModel:uuid)"
    },
    "id": "$t(dataModel:stateProperties.meta.id)",
    "data": "data",
    "type": "$t(dataModel:type)",
    "typeOptions": {
      "Report": "desired",
      "Control": "current"
    },
    "status": "$t(dataModel:status)",
    "statusOptions": {
      "Send": "sent",
      "Pending": "pending",
      "Failed": "failed"
    },
    "status_payment":{
      "not_shared": "you don't have access to this data",
      "not_paid": "you haven't paid to access to this data",
      "no_points": "Upgrade your subscription to view this data"
    },
    "timestamp": "$t(dataModel:timestamp)",
    "controlState": "$t(dataModel:stateProperties.typeOptions.Report) $t(dataModel:state)",
    "reportState": "$t(dataModel:stateProperties.typeOptions.Control) $t(dataModel:state)",
    "initialState": "initial $t(dataModel:state) data",
    "initialControlState": "initial $t(dataModel:stateProperties.controlState)",
    "initialReportState": "initial $t(dataModel:stateProperties.reportState)"
  },
  "validation": {
    "invalidNumber": "not a valid number",
    "lengthTooLong": "the length should not exceed {{max}} characters",
    "numberTooSmall": "the number should be larger than {{number}}",
    "numberTooLarge": "the number should be smaller than {{number}}",
    "outsideNumberRange": "the number should be between {{min}} and {{max}}"
  }
}
